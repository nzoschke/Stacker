#!/bin/bash
set -o pipefail

BIN_DIR=$(cd $(dirname $0); pwd)

display() { echo -e "\n----->" $*; }
abort()   { echo $* ; exit 1; }
indent()  { sed -u "s/^/       /"; }


opt() {
  echo "$@"
}

with-temp() {
  #/ usage: [DESTDIR=dir] with-temp -s CMDS
  #/
  script=$(opt -s --script "$@")
  DESTDIR=${DESTDIR:-$(mktemp -d)}
  mkdir -p $DESTDIR
  eval $script
  status=$?
  #rm -rf $DESTDIR
  return status
}

apt-urls() {
  TEMPDIR=$(mktemp -d)
  mkdir $TEMPDIR/partial
  apt-get -o Dir::Cache::archives=$TEMPDIR --print-uris -y install $@ | egrep -o --regex '[a-z]+://[^ ]*deb'
  status=$?
  rm -rf $TEMPDIR
  return $status
}

apt-files() {
  apt-urls $@ | egrep -o --regex '[^/]+.deb'
}

apt-download() {
  apt-urls $@ || { echo Could not resolve $@; return 1; }
  DESTDIR=${DESTDIR:-$(pwd)}
  mkdir -p $DESTDIR/partial
  apt-get --force-yes -y -d -o Dir::Cache::archives=$DESTDIR install $@
  status=$?
  rm -rf $DESTDIR/lock $DESTDIR/partial
  return $status
}

wget() {
  if [ ! -f /tmp/wget ]; then
    DESTDIR=$(mktemp -d) ; cd $TEMPDIR
    apt-download wget
    dpkg --instdir=. --unpack *.deb
    cp usr/bin/wget /tmp/wget
    rm -rf $TEMPDIR
  fi
  /tmp/wget "$@"
}

stacklet() {
  STACKLET=$1 ; shift
  while [ "$1" != "" ]; do
    case $1 in
      -p | --ppa )    shift
                      ppas="$ppas $1"
                      ;;
      -s | --source ) shift
                      sources="$sources $1"
                      ;;
      * )             break
                      ;;
    esac
    shift
  done

  TEMPDIR=$(mktemp -d) ; cd $TEMPDIR
  apt-download $sources
}

export -f apt-urls apt-files apt-download wget stacklet